{"version":3,"sources":["images/logo.png","components/ChatInput.js","components/ChatMessage.js","components/ChatMessageList.js","components/utils/LogOutButton.js","redux/actions.js","components/Chat.js","components/Header.js","components/App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["module","exports","ChatInput","state","message","action","onSubmit","e","preventDefault","props","onSubmitMessage","setState","className","type","placeholder","value","this","onChange","target","variant","Component","ChatMessage","name","time","Date","toLocaleString","ChatMessageList","console","log","scrollToBottom","messagesEnd","scrollIntoView","behavior","messages","map","key","uniqid","from","style","float","clear","ref","el","connect","LogOutButton","logOut","onClick","ADD_MESSAGES","Chat","addMessages","dispatch","submitMessage","messageString","ws","send","JSON","stringify","localStorage","removeItem","initConnection","WebSocket","onopen","getItem","onmessage","event","parse","data","document","hidden","window","Notification","permission","requestPermission","then","alert","onclose","onerror","error","htmlFor","id","setItem","Header","bg","Brand","href","alt","src","logo","width","height","App","Boolean","location","hostname","match","initialState","store","createStore","Object","assign","concat","reverse","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d1fb701.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.116b6b3b.png\";","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\n\nclass ChatInput extends Component {\n  static propTypes = {\n    onSubmitMessage: PropTypes.func.isRequired,\n  }\n  state = {\n    message: '',\n  }\n\n  render() {\n    return (\n      <form\n        action=\".\"\n        onSubmit={e => {\n          e.preventDefault()\n          this.props.onSubmitMessage(this.state.message)\n          this.setState({ message: '' })\n        }}\n      >\n        <textarea\n          className=\"text\"  \n          type=\"text\"\n          placeholder={'Enter message...'}\n          value={this.state.message}\n          onChange={e => this.setState({ message: e.target.value })}\n        />\n         <Button className=\"submit-button\" type=\"submit\" variant=\"dark\">Send</Button>\n        {/* <input type=\"submit\" value={'Send'} /> */}\n      </form>\n    )\n  }\n}\n\nexport default ChatInput;\n","import React from 'react';\n\nconst ChatMessage = ({ name, message, time }) =>\n<div className=\"message\">\n  <strong className=\"nickname\">{name}</strong><span className='time'>{new Date(time).toLocaleString()}</span>\n  <em className='message-text'>{message}</em>  \n</div> \n\nexport default ChatMessage;\n  ","import React, { Component } from 'react';\nimport ChatMessage from './ChatMessage';\nimport uniqid from 'uniqid';\nimport { connect } from 'react-redux';\n\nclass ChatMessageList extends Component {\n    constructor(props) {\n        super();\n        console.log(props)\n      }\n\n      componentDidMount() {\n        this.scrollToBottom();\n      }\n    \n      componentDidUpdate() {\n        this.scrollToBottom();\n      }\n    \n      scrollToBottom() {\n        this.messagesEnd.scrollIntoView({ behavior: 'smooth' });\n      }\n\n  render() {\n    return (\n      <section className=\"messages-block\">\n        {this.props.messages.map(message =>\n          <ChatMessage\n            key={uniqid()}\n            message={message.message}\n            name={message.from}\n            time={message.time}\n          />,\n        )}\n        <div style={{ float:\"left\", clear: \"both\" }}\n             ref={(el) => { this.messagesEnd = el; }}>\n        </div>  \n      </section>\n    );\n  }\n}\n\nexport default connect((state) => ({messages: state.messages}))(ChatMessageList);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst LogOutButton = ({logOut}) => (\n  <Button className=\"logout-button\" onClick={logOut} variant=\"dark\">Log out</Button>\n)\n\nexport default LogOutButton;\n","/*\n * action types\n */\n\nexport const ADD_MESSAGES = 'ADD_MESSAGES'\n\n\n/*\n * action creators\n */\nexport default function addMessages(messages) {\n  return { type: ADD_MESSAGES, messages }\n}\n","import React, { Component } from 'react';\nimport ChatInput from './ChatInput';\nimport ChatMessageList from './ChatMessageList';\nimport LogOutButton from './utils/LogOutButton';\nimport { connect } from 'react-redux';\nimport addMessages from '../redux/actions'\n\nconst URL = 'wss://wssproxy.herokuapp.com/';\n\nclass Chat extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      name: '',\n      messages: [],     \n    };\n  } \n  \n  componentDidMount() {\n    this.initConnection();\n  }\n\n  initConnection() {\n    this.ws = new WebSocket(URL);\n    this.ws.onopen = () => {\n      console.log('connected'); \n      this.setState(state => ({ name: localStorage.getItem('nickname') }))         \n    }\n\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      this.addMessages(message);\n      if (document.hidden === true) {\n        if (!(\"Notification\" in window)) {\n            alert(\"This browser does not support desktop notification\");\n          }        \n          // Let's check whether notification permissions have already been granted\n        else if (Notification.permission === \"granted\") {\n            // If it's okay let's create a notification\n            var cn = new Notification('New message');\n            console.log('New message');            \n        }        \n          // Otherwise, we need to ask the user for permission\n        else if (Notification.permission !== \"denied\") {\n            Notification.requestPermission().then(function (permission) {\n              // If the user accepts, let's create a notification\n              if (permission === \"granted\") {\n                  var cn = new Notification('New message');\n                console.log('New message');\n              }\n            });\n        }        \n      }\n    }\n\n    this.ws.onclose = (event) => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n      this.initConnection();      \n    }\n\n    this.ws.onerror = function(error) {\n      alert(\"Ошибка \" + error.message);\n    };\n  }\n\n  addMessages = messages => {\n    const { dispatch } = this.props;\n    dispatch(addMessages(messages))\n  }\n\n  submitMessage = messageString => {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { from: this.state.name, message: messageString };\n    this.ws.send(JSON.stringify(message));\n  }\n\n  logOut = () => {\n          localStorage.removeItem('nickname');\n          this.setState(state => ({ name: '' }));\n           }\n\n  render() {\n    return (\n      <main className=\"main\">\n        \n        <label htmlFor=\"name\">\n          Nickname:&nbsp;\n          <input\n            type=\"text\"\n            id={'name'}\n            placeholder={'Enter your name...'}\n            value={this.state.name}\n            onChange={e => {\n                        localStorage.setItem('nickname', e.target.value)\n                        this.setState({ name: e.target.value });\n                      }}\n                            \n          />\n        </label>\n        <LogOutButton logOut={this.logOut} />\n        <ChatMessageList/>\n        <ChatInput\n          ws={this.ws}\n          onSubmitMessage={messageString => this.submitMessage(messageString)}\n        />\n      </main>\n    )\n  }\n}\n\nexport default connect()(Chat);\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport logo from '../images/logo.png';\n\n\nclass Header extends Component {\n  render() {\n    return (\n      <> \n        <header>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\" className='chat-title'>\n              <img\n                alt=\"\"\n                src={logo}\n                width=\"50\"\n                height=\"50\"\n                className=\"d-inline-block align-top\"\n              />\n              {' My super chat'}\n            </Navbar.Brand>          \n          </Navbar>\n        </header>         \n      </>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nimport '../App.css';\nimport Chat from './Chat';\nimport Header from './Header';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />        \n        <Chat />        \n      </div>\n    )\n  }  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      \n      const swFileName = process.env.NODE_ENV === 'production'  ? 'service-worker.js'  : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_MESSAGES } from './actions'\n\nconst initialState = {\n    messages: []\n  }\n\nexport default function chatApp(state = initialState, action) {\n    switch (action.type) {\n        case ADD_MESSAGES:\n            return Object.assign({}, state, {\n                messages: state.messages.concat(action.messages.reverse())\n            })\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport chatApp from './redux/reducers'\nconst store = createStore(chatApp)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n   document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}