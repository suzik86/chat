{"version":3,"sources":["images/logo.png","components/ChatInput.js","components/ChatMessage.js","components/ChatMessageList.js","components/utils/LogOutButton.js","redux/actions.js","components/Chat.js","components/Header.js","components/App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["module","exports","ChatInput","action","onSubmit","this","props","onSubmitFunc","id","className","type","placeholder","value","message","onChange","variant","Component","ChatMessage","name","time","Date","toLocaleString","ChatMessageList","console","log","scrollToBottom","messagesEnd","scrollIntoView","behavior","messages","map","key","uniqid","from","style","float","clear","ref","el","connect","state","LogOutButton","logOut","onClick","ADD_MESSAGES","Chat","addMessages","dispatch","submitMessage","messageString","ws","send","JSON","stringify","e","preventDefault","readyState","notSubmitMessages","push","setState","localStorage","removeItem","target","reconnectTimer","initConnection","getItem","socket","callback","self","setTimeout","waitForSocketConnection","WebSocket","onopen","document","getElementById","innerHTML","color","forEach","onmessage","event","parse","data","hidden","window","Notification","permission","requestPermission","then","alert","onclose","reconnect","onerror","error","htmlFor","setItem","Header","bg","Brand","href","alt","src","logo","width","height","App","Boolean","location","hostname","match","initialState","store","createStore","Object","assign","concat","reverse","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.966d046b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.116b6b3b.png\";","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nclass ChatInput extends Component {\n    \n  render() {\n    return (\n      <form\n        action=\".\"\n        onSubmit={this.props.onSubmitFunc}\n      >\n        <span id='connection'></span>\n        <textarea\n          className=\"text\"  \n          type=\"text\"\n          placeholder={'Enter message...'}\n          value={this.props.message}\n          onChange={this.props.onChange}\n        />\n         <Button className=\"submit-button\" type=\"submit\" variant=\"dark\">Send</Button>\n      </form>\n    )\n  }\n}\n\nexport default ChatInput;\n","import React from 'react';\n\nconst ChatMessage = ({ name, message, time }) =>\n<div className=\"message\">\n  <strong className=\"nickname\">{name}</strong><span className='time'>{new Date(time).toLocaleString()}</span>\n  <em className='message-text'>{message}</em>  \n  <span id='message-info'></span>\n</div> \n\nexport default ChatMessage;\n  ","import React, { Component } from 'react';\nimport ChatMessage from './ChatMessage';\nimport uniqid from 'uniqid';\nimport { connect } from 'react-redux';\n\nclass ChatMessageList extends Component {\n    constructor(props) {\n        super();\n        console.log(props)\n      }\n\n      componentDidMount() {\n        this.scrollToBottom();\n      }\n    \n      componentDidUpdate() {\n        this.scrollToBottom();\n      }\n    \n      scrollToBottom() {\n        this.messagesEnd.scrollIntoView({ behavior: 'smooth' });\n      }\n\n  render() {\n    return (\n      <section className=\"messages-block\">\n        {this.props.messages.map(message =>\n          <ChatMessage\n            key={uniqid()}\n            message={message.message}\n            name={message.from}\n            time={message.time}\n          />,\n        )}\n        <div style={{ float:\"left\", clear: \"both\" }}\n             ref={(el) => { this.messagesEnd = el; }}>\n        </div>  \n      </section>\n    );\n  }\n}\n\nexport default connect((state) => ({messages: state.messages}))(ChatMessageList);\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst LogOutButton = ({logOut}) => (\n  <Button className=\"logout-button\" onClick={logOut} variant=\"dark\">Log out</Button>\n)\n\nexport default LogOutButton;\n","/*\n * action types\n */\n\nexport const ADD_MESSAGES = 'ADD_MESSAGES'\n\n\n/*\n * action creators\n */\nexport default function addMessages(messages) {\n  return { type: ADD_MESSAGES, messages }\n}\n","import React, { Component } from 'react';\nimport ChatInput from './ChatInput';\nimport ChatMessageList from './ChatMessageList';\nimport LogOutButton from './utils/LogOutButton';\nimport { connect } from 'react-redux';\nimport addMessages from '../redux/actions';\nimport { setTimeout } from 'timers';\n\n\nconst URL = 'wss://wssproxy.herokuapp.com/';\n\n\nclass Chat extends Component {\n  constructor(props) {\n    super();\n    this.reconnectTimer = null;\n    this.state = {\n      name: '',\n      message: '',\n      notSubmitMessages: []     \n    };\n  } \n  \n  componentDidMount() {\n    this.initConnection();\n    this.setState(state => ({ name: localStorage.getItem('nickname') }))         \n  }\n\n\n  waitForSocketConnection(socket, callback) {\n\n    const self = this;\n    setTimeout(\n        function () {\n            if (socket.readyState === 1) {\n                if (callback != null){\n                    callback();\n                }\n            } else {\n                self.waitForSocketConnection(socket, callback);\n            }\n\n        }, 5); // wait 5 milisecond for the connection...\n    }\n\n  initConnection() {\n\n    this.ws = new WebSocket(URL);\n    \n    const self = this;\n\n    this.ws.onopen = () => {\n      console.log('connected');\n      document.getElementById('connection').innerHTML=\"online\";\n      document.getElementById('connection').style.color = 'green';\n      self.waitForSocketConnection(self.ws, function() {\n        self.state.notSubmitMessages.forEach(self.submitMessage);\n        self.setState({ notSubmitMessages: [] });\n      });\n    }\n\n    this.ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      this.addMessages(message);\n      if (document.hidden === true) {\n        if (!(\"Notification\" in window)) {\n            alert(\"This browser does not support desktop notification\");\n          }        \n          // Let's check whether notification permissions have already been granted\n        else if (Notification.permission === \"granted\") {\n            // If it's okay let's create a notification\n            var notification = new Notification('New message');\n            console.log('New message');            \n        }        \n          // Otherwise, we need to ask the user for permission\n        else if (Notification.permission !== \"denied\") {\n            Notification.requestPermission().then(function (permission) {\n              // If the user accepts, let's create a notification\n              if (permission === \"granted\") {\n                  var notification = new Notification('New message');\n                console.log('New message');\n              }\n            });\n        }        \n      }\n    }\n\n    this.ws.onclose = (event) => {\n      console.log('disconnected'); \n      document.getElementById('connection').innerHTML=\"offline\";  \n      document.getElementById('connection').style.color = 'red';\n      self.reconnect();\n    }\n\n    this.ws.onerror = function(error) {\n      console.error(error);\n      // self.reconnect();\n    };\n  }\n\n  reconnect() {\n    const self = this;\n    setTimeout(function(){self.initConnection()}, 5000);\n  }\n\n  addMessages = messages => {\n    const { dispatch } = this.props;\n    dispatch(addMessages(messages))\n  }\n\n  submitMessage = messageString => {\n    // on submitting the ChatInput form, send the message, add it to the list and reset the input\n    const message = { from: this.state.name, message: messageString };\n    this.ws.send(JSON.stringify(message));\n  }\n\n  onSubmitFunc = e => {\n    e.preventDefault();\n    if (this.ws.readyState !== 1) {\n      this.state.notSubmitMessages.push(this.state.message);\n      console.log(this.state.notSubmitMessages);\n      this.setState({ message: '' });\n    } else {\n      this.submitMessage(this.state.message);\n      this.setState({ message: '' });      \n    }    \n  }\n\n  logOut = () => {\n          localStorage.removeItem('nickname');\n          this.setState(state => ({ name: '' }));\n           }\n\n  onChange = (e) => {this.setState({ message: e.target.value })}\n\n  render() {\n    return (\n      <main className=\"main\">\n        \n        <label htmlFor=\"name\">\n          Nickname:&nbsp;\n          <input\n            type=\"text\"\n            id={'name'}\n            placeholder={'Enter your name...'}\n            value={this.state.name}\n            onChange={e => {\n                        localStorage.setItem('nickname', e.target.value)\n                        this.setState({ name: e.target.value });\n                      }}                            \n          />\n        </label>\n        <LogOutButton logOut={this.logOut} />\n        <ChatMessageList/>\n        <ChatInput\n          ws={this.ws}\n          onSubmitFunc={this.onSubmitFunc}\n          message={this.state.message}\n          onChange={this.onChange}\n        />\n      </main>\n    )\n  }\n}\n\nexport default connect()(Chat);\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport logo from '../images/logo.png';\n\n\nclass Header extends Component {\n  render() {\n    return (\n      <> \n        <header>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\" className='chat-title'>\n              <img\n                alt=\"\"\n                src={logo}\n                width=\"50\"\n                height=\"50\"\n                className=\"d-inline-block align-top\"\n              />\n              {' My super chat'}\n            </Navbar.Brand>          \n          </Navbar>\n        </header>         \n      </>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nimport '../App.css';\nimport Chat from './Chat';\nimport Header from './Header';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />        \n        <Chat />        \n      </div>\n    )\n  }  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      \n      const swFileName = process.env.NODE_ENV === 'production'  ? 'service-worker.js'  : 'custom-sw.js'\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_MESSAGES } from './actions'\n\nconst initialState = {\n    messages: []\n  }\n\nexport default function chatApp(state = initialState, action) {\n    switch (action.type) {\n        case ADD_MESSAGES:\n            return Object.assign({}, state, {\n                messages: state.messages.concat(action.messages.reverse())\n            })\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport chatApp from './redux/reducers'\nconst store = createStore(chatApp)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n   document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}